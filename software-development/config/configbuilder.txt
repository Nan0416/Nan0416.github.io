*** source build to provider ***
*** builder build to root ***

public interface IConfigurationSource{
    IConfigurationProvider Build(IConfigurationBuilder builder);
}
public class ConfigurationBuilder : IConfigurationBuilder{
     public IList<IConfigurationSource> Sources { get; } = new List<IConfigurationSource>();
     public IConfigurationBuilder Add(IConfigurationSource source){
        Sources.Add(source);
        return this;
    }
    public IConfigurationRoot Build(){
        var providers = new List<IConfigurationProvider>();
        foreach (var source in Sources){
            var provider = source.Build(this); // build provider. Json provider just new JsonConfigurationProvider(JsonConfigurationBuilder)
            providers.Add(provider);
        }
         return new ConfigurationRoot(providers);
    }
}
public static class ConfigurationExtensions{
    public static IConfigurationBuilder Add<TSource>(this IConfigurationBuilder builder, Action<TSource> configureSource) where TSource : IConfigurationSource, new(){
        var source = new TSource(); // create an empty source/builder
        configureSource?.Invoke(source); // config the source/builder
        return builder.Add(source); // append the source
    }
}

public static class JsonConfigurationExtensions{
    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){
        // create a delegate to config the source/builder.
        return builder.AddJsonFile(s => {
                s.FileProvider = provider;
                s.Path = path;
                s.Optional = optional;
                s.ReloadOnChange = reloadOnChange;
                s.ResolveFileProvider();
            });
        }
    }
    // can builder natively function.
    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, Action<JsonConfigurationSource> configureSource)
        => builder.Add(configureSource);
}


==== json source & provider ====
public abstract class FileConfigurationSource : IConfigurationSource{
    // Used to access the contents of the file.
    public IFileProvider FileProvider { get; set; }
    public string Path { get; set; }
    // Determines if loading the file is optional.
    public bool Optional { get; set; }
    // Determines whether the source will be loaded if the underlying file changes.
    public bool ReloadOnChange { get; set; }
    // Number of milliseconds that reload will wait before calling Load.  This helps avoid triggering reload before a file is completely written. Default is 250.
    public int ReloadDelay { get; set; } = 250;
    public Action<FileLoadExceptionContext> OnLoadException { get; set; }
    public abstract IConfigurationProvider Build(IConfigurationBuilder builder);
    public void EnsureDefaults(IConfigurationBuilder builder){
        FileProvider = FileProvider ?? builder.GetFileProvider();
        OnLoadException = OnLoadException ?? builder.GetFileLoadExceptionHandler();
    }
    // If no file provider has been set, for absolute Path, this will creates a physical file provider for the nearest existing directory.
    public void ResolveFileProvider(){
        if (FileProvider == null && !string.IsNullOrEmpty(Path) && System.IO.Path.IsPathRooted(Path)){
        var directory = System.IO.Path.GetDirectoryName(Path);
        var pathToFile = System.IO.Path.GetFileName(Path);
        while (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory)){
            pathToFile = System.IO.Path.Combine(System.IO.Path.GetFileName(directory), pathToFile);
            directory = System.IO.Path.GetDirectoryName(directory);
        }
        if (Directory.Exists(directory)){
            FileProvider = new PhysicalFileProvider(directory);
            Path = pathToFile;
        }
    }
}
public class JsonConfigurationSource : FileConfigurationSource{
    public override IConfigurationProvider Build(IConfigurationBuilder builder){
        return new JsonConfigurationProvider(this);
    }
}


==== access configuration ===
public interface IConfiguration{
        string this[string key] { get; set; }
        IEnumerable<IConfigurationSection> GetChildren();
        IChangeToken GetReloadToken();
        IConfigurationSection GetSection(string key);
}
public interface IConfigurationRoot : IConfiguration{
    IEnumerable<IConfigurationProvider> Providers { get; }
    void Reload();
}
public class ConfigurationRoot : IConfigurationRoot{

}

A configuration builder.

A configuration source => 
build the source on the "configuration builder" => provider
provider.load() // flat hierachey
create a root.







