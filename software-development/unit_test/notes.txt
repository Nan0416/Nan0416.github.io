unittest

moq
autofac

using Microsoft.VisualStudio.TestTools.UnitTesting; // defines attributes e.g. TestClass, TestMethod
using Autofac.Extras.Moq; // autofac moq

to test a target method, there are multiple criteria. e.g. 
1. verifying the result returned by the target method,
2. verifying the number of call of a method inside the target_method.
3. verifying if the target throws a desired exception.


Example: test a method `target_method` of a class `target_class`.

1. generate an object of the `target_class`.
create fake objects that are required by the `target_class`'s constructor.

2. invoke the `target_method` on the target object.

3. verify


// autofac.moq + unittest
1). create fake object by developer, register these fake objects with autofac's Provide, and then get an object of the `target_class` from autofac, mock.Create.
3). verify result returned by the `target_method`

// moq
1). generate empty fake objects by using moq based on interface, configure these fake objects return specific value on an invokation, manually generate the object of `target_class`

2). verify result and verify the number of call on these moq generated fake objects.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Autofac;
using Autofac.Extras.Moq;
using Kabbage.Data.KoltpWeb;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Kabbage.Data.KoltpWeb.Enums;
using Kabbage.DataService.EntityFramework.Repositories;
using Kabbage.DataService.Entities;

namespace Kabbage.Dataservice.EntityFramework.Unit.Tests
{
    [TestClass]
    public class FinancialInstitutionRepositoryTests
    {
        [TestMethod]
        public void Upsert_WithFinancialInstitutionTypes_DoesNotAddProviders()
        {
            var context = new FakeKoltpWebContext();

            using (var mock = AutoMock.GetLoose())
            {
                context.Configuration_FinancialInstitutions.Add(new Configuration_FinancialInstitution
                {
                    FinancialInstitutionId = 2132,
                    ProviderCompanyId = "9999123",
                    ProviderId = 8,
                    FinancialInstitutionTypeLinks = new List<Configuration_FinancialInstitutionTypeLink>
                    {
                        new Configuration_FinancialInstitutionTypeLink
                        {
                            FinancialInstitutionId = 2132,
                            FinancialInstitutionTypeId = (int)FinancialInstitutionType.Bank,
                            IsActive = true,
                        }
                    }
                });

                context.Configuration_FinancialInstitutionTypeLinks.Add(new Configuration_FinancialInstitutionTypeLink
                {
                    FinancialInstitutionId = 2132,
                    FinancialInstitutionTypeId = (int)FinancialInstitutionType.Bank,
                    IsActive = true,
                });

                mock.Provide<IKoltpWebContext>(new FakeKoltpWebContext());

                var service =new FinancialInstitutionRepository();

                service.Upsert(new FinancialInstitution
                {
                    ProviderCompanyId = "9999123",
                    ProviderID = 8,
                },
                null,
                new FinancialInstitutionType[] {
                    FinancialInstitutionType.Bank, FinancialInstitutionType.Bill
                });
            }
        }
    }
}
