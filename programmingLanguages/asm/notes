The processor's jobs can be categorized as arithmetic, logical and control. To program a processor, we can only use the instruction 
set that support by the specific target processor. (e.g. Cortex-M3 only supports Thumb1/2, Atmega328p supports Atmel AVR instruction set)
Therefore, a specific instruction + the assembly language syntax would produce the correct program.

This note takes the atmega328p as the programming target. Even though it uses the avr instruction set, but it may not support all the instructions.

Helper: avr-gcc  -Wall -O1 -S -mmcu=atmega328p main.c

Concept for syntax
1. Directives [pseudo-ops]: (e.g. .text) are commands that are part of the assembler syntax but are not related to the x86 processor instruction set. 
All assembler directives begin with a period (.) But different assemblers may have different directives. e.g. both avrasm and avr-as are used to
compile the assmebly code for avr devices, but they have a few different directives. The assembler used in this note is avr-as, which is a member of gnu as.
Its directives can be checked in http://ftp.gnu.org/old-gnu/Manuals/gas/html_chapter/as_7.html

2. Different assemblers may also use a slightly different syntax, e.g. GNU as use AT&T assmebly syntax (mnemonic(助记符) src, dst)
https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax

3. Labels: (e.g. main:) locates the address of a piece of code.
	1).symbolic label: A symbolic label e.g. L2 or .L2 
						It can only defined only once. 
						Symbolic labels without prefix . are in global scope and appear in the object file's symbol table.
						Symbolic labels with . are in local scope and do not appear in the object file's symbol table.
	2). numeric label: a number from 0 to 9, inclusive. They are in local scope and do not appear in the object file's symbol table.
		e.g. 
		1: 				;define a numeric label 1
			mov r1, r2
			brne 1b		;1b (before) jump to the nearest label 1 define before here. The first
			jmp 1f		;1f (forward) jump to the nearest label 1 define after here. The second
		1:				;define the numeric label 1 again
			mov 

GNU AS directives:
1. .text (name code section): define the start of a section of code. A executable can have several code sections that goes to different 
locations in the executable. For example, the cortex-m3 requires isr_handler section and main program section.
The code under .text belongs to the same .text section.  
Using ".text" by itself tells the assembler that the following code goes in the default section.

2. .section name: assemble the following code into a section named name
.text = .section .text

3. .global [.globl] symbol (declare a symbol as global): This make the symbol as global, it means that other .s files and the linker can see the 
file. A symbol can either a label or Because the linker takes the main function as entry point, it is necessary to declare the main as global.

4. .equ symbol, expression (declare a symbol as the value of expression) like a macro
	.set symbol, expression : same as equ 
	.equiv symbol, expression : same as equ, but when define twice, the assembler will report an error.


.file (for debugging)
.def (for debugging)



http://www.cs.virginia.edu/~evans/cs216/guides/x86.html
